#include <OneWire.h> 
#include <ESP8266WiFi.h> 
#include <ESP8266WebServer.h> 
#include <ESP8266mDNS.h> 
#include <ESP8266HTTPClient.h>

#define PIN_SCE 1
#define PIN_RESET 3
#define PIN_DC 15
#define PIN_SDIN 13
#define PIN_SCLK 12
#define PIN_BL 14

#define LED BUILTIN_LED

// COnfiguration for the LCD
#define LCD_C LOW
#define LCD_D HIGH
#define LCD_CMD 0
#define DISPLAY_LENGTH 10

// Size of the LCD
#define LCD_X 84
#define LCD_Y 48

#define PORT 80

#define DS18S20_Pin 5
OneWire ds(DS18S20_Pin);

const char * IFTTT_KEY = "...";
const char * OPEN_WEATHER_KEY = "...";

const char * ssid = "...";
const char * password = "...";

ESP8266WebServer server(80);
HTTPClient http;

int scrollPosition = -10;
int lifeSpan = 0;
float tempSum = 0;
int contrast = 177;
int backlight = 0;

static
const byte ASCII[][5] = {
  {
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
  } // 20
  ,
  {
    0x00,
    0x00,
    0x5f,
    0x00,
    0x00
  } // 21 !
  ,
  {
    0x00,
    0x07,
    0x00,
    0x07,
    0x00
  } // 22 "
  ,
  {
    0x14,
    0x7f,
    0x14,
    0x7f,
    0x14
  } // 23 #
  ,
  {
    0x24,
    0x2a,
    0x7f,
    0x2a,
    0x12
  } // 24 $
  ,
  {
    0x23,
    0x13,
    0x08,
    0x64,
    0x62
  } // 25 %
  ,
  {
    0x36,
    0x49,
    0x55,
    0x22,
    0x50
  } // 26 &
  ,
  {
    0x00,
    0x05,
    0x03,
    0x00,
    0x00
  } // 27 '
  ,
  {
    0x00,
    0x1c,
    0x22,
    0x41,
    0x00
  } // 28 (
  ,
  {
    0x00,
    0x41,
    0x22,
    0x1c,
    0x00
  } // 29 )
  ,
  {
    0x14,
    0x08,
    0x3e,
    0x08,
    0x14
  } // 2a *
  ,
  {
    0x08,
    0x08,
    0x3e,
    0x08,
    0x08
  } // 2b +
  ,
  {
    0x00,
    0x50,
    0x30,
    0x00,
    0x00
  } // 2c ,
  ,
  {
    0x08,
    0x08,
    0x08,
    0x08,
    0x08
  } // 2d -
  ,
  {
    0x00,
    0x60,
    0x60,
    0x00,
    0x00
  } // 2e .
  ,
  {
    0x20,
    0x10,
    0x08,
    0x04,
    0x02
  } // 2f /
  ,
  {
    0x3e,
    0x51,
    0x49,
    0x45,
    0x3e
  } // 30 0
  ,
  {
    0x00,
    0x42,
    0x7f,
    0x40,
    0x00
  } // 31 1
  ,
  {
    0x42,
    0x61,
    0x51,
    0x49,
    0x46
  } // 32 2
  ,
  {
    0x21,
    0x41,
    0x45,
    0x4b,
    0x31
  } // 33 3
  ,
  {
    0x18,
    0x14,
    0x12,
    0x7f,
    0x10
  } // 34 4
  ,
  {
    0x27,
    0x45,
    0x45,
    0x45,
    0x39
  } // 35 5
  ,
  {
    0x3c,
    0x4a,
    0x49,
    0x49,
    0x30
  } // 36 6
  ,
  {
    0x01,
    0x71,
    0x09,
    0x05,
    0x03
  } // 37 7
  ,
  {
    0x36,
    0x49,
    0x49,
    0x49,
    0x36
  } // 38 8
  ,
  {
    0x06,
    0x49,
    0x49,
    0x29,
    0x1e
  } // 39 9
  ,
  {
    0x00,
    0x36,
    0x36,
    0x00,
    0x00
  } // 3a :
  ,
  {
    0x00,
    0x56,
    0x36,
    0x00,
    0x00
  } // 3b ;
  ,
  {
    0x08,
    0x14,
    0x22,
    0x41,
    0x00
  } // 3c <
  ,
  {
    0x14,
    0x14,
    0x14,
    0x14,
    0x14
  } // 3d =
  ,
  {
    0x00,
    0x41,
    0x22,
    0x14,
    0x08
  } // 3e >
  ,
  {
    0x02,
    0x01,
    0x51,
    0x09,
    0x06
  } // 3f ?
  ,
  {
    0x32,
    0x49,
    0x79,
    0x41,
    0x3e
  } // 40 @
  ,
  {
    0x7e,
    0x11,
    0x11,
    0x11,
    0x7e
  } // 41 A
  ,
  {
    0x7f,
    0x49,
    0x49,
    0x49,
    0x36
  } // 42 B
  ,
  {
    0x3e,
    0x41,
    0x41,
    0x41,
    0x22
  } // 43 C
  ,
  {
    0x7f,
    0x41,
    0x41,
    0x22,
    0x1c
  } // 44 D
  ,
  {
    0x7f,
    0x49,
    0x49,
    0x49,
    0x41
  } // 45 E
  ,
  {
    0x7f,
    0x09,
    0x09,
    0x09,
    0x01
  } // 46 F
  ,
  {
    0x3e,
    0x41,
    0x49,
    0x49,
    0x7a
  } // 47 G
  ,
  {
    0x7f,
    0x08,
    0x08,
    0x08,
    0x7f
  } // 48 H
  ,
  {
    0x00,
    0x41,
    0x7f,
    0x41,
    0x00
  } // 49 I
  ,
  {
    0x20,
    0x40,
    0x41,
    0x3f,
    0x01
  } // 4a J
  ,
  {
    0x7f,
    0x08,
    0x14,
    0x22,
    0x41
  } // 4b K
  ,
  {
    0x7f,
    0x40,
    0x40,
    0x40,
    0x40
  } // 4c L
  ,
  {
    0x7f,
    0x02,
    0x0c,
    0x02,
    0x7f
  } // 4d M
  ,
  {
    0x7f,
    0x04,
    0x08,
    0x10,
    0x7f
  } // 4e N
  ,
  {
    0x3e,
    0x41,
    0x41,
    0x41,
    0x3e
  } // 4f O
  ,
  {
    0x7f,
    0x09,
    0x09,
    0x09,
    0x06
  } // 50 P
  ,
  {
    0x3e,
    0x41,
    0x51,
    0x21,
    0x5e
  } // 51 Q
  ,
  {
    0x7f,
    0x09,
    0x19,
    0x29,
    0x46
  } // 52 R
  ,
  {
    0x46,
    0x49,
    0x49,
    0x49,
    0x31
  } // 53 S
  ,
  {
    0x01,
    0x01,
    0x7f,
    0x01,
    0x01
  } // 54 T
  ,
  {
    0x3f,
    0x40,
    0x40,
    0x40,
    0x3f
  } // 55 U
  ,
  {
    0x1f,
    0x20,
    0x40,
    0x20,
    0x1f
  } // 56 V
  ,
  {
    0x3f,
    0x40,
    0x38,
    0x40,
    0x3f
  } // 57 W
  ,
  {
    0x63,
    0x14,
    0x08,
    0x14,
    0x63
  } // 58 X
  ,
  {
    0x07,
    0x08,
    0x70,
    0x08,
    0x07
  } // 59 Y
  ,
  {
    0x61,
    0x51,
    0x49,
    0x45,
    0x43
  } // 5a Z
  ,
  {
    0x00,
    0x7f,
    0x41,
    0x41,
    0x00
  } // 5b [
  ,
  {
    0x02,
    0x04,
    0x08,
    0x10,
    0x20
  } // 5c ¥
  ,
  {
    0x00,
    0x41,
    0x41,
    0x7f,
    0x00
  } // 5d ]
  ,
  {
    0x04,
    0x02,
    0x01,
    0x02,
    0x04
  } // 5e ^
  ,
  {
    0x40,
    0x40,
    0x40,
    0x40,
    0x40
  } // 5f _
  ,
  {
    0x00,
    0x01,
    0x02,
    0x04,
    0x00
  } // 60 `
  ,
  {
    0x20,
    0x54,
    0x54,
    0x54,
    0x78
  } // 61 a
  ,
  {
    0x7f,
    0x48,
    0x44,
    0x44,
    0x38
  } // 62 b
  ,
  {
    0x38,
    0x44,
    0x44,
    0x44,
    0x20
  } // 63 c
  ,
  {
    0x38,
    0x44,
    0x44,
    0x48,
    0x7f
  } // 64 d
  ,
  {
    0x38,
    0x54,
    0x54,
    0x54,
    0x18
  } // 65 e
  ,
  {
    0x08,
    0x7e,
    0x09,
    0x01,
    0x02
  } // 66 f
  ,
  {
    0x0c,
    0x52,
    0x52,
    0x52,
    0x3e
  } // 67 g
  ,
  {
    0x7f,
    0x08,
    0x04,
    0x04,
    0x78
  } // 68 h
  ,
  {
    0x00,
    0x44,
    0x7d,
    0x40,
    0x00
  } // 69 i
  ,
  {
    0x20,
    0x40,
    0x44,
    0x3d,
    0x00
  } // 6a j
  ,
  {
    0x7f,
    0x10,
    0x28,
    0x44,
    0x00
  } // 6b k
  ,
  {
    0x00,
    0x41,
    0x7f,
    0x40,
    0x00
  } // 6c l
  ,
  {
    0x7c,
    0x04,
    0x18,
    0x04,
    0x78
  } // 6d m
  ,
  {
    0x7c,
    0x08,
    0x04,
    0x04,
    0x78
  } // 6e n
  ,
  {
    0x38,
    0x44,
    0x44,
    0x44,
    0x38
  } // 6f o
  ,
  {
    0x7c,
    0x14,
    0x14,
    0x14,
    0x08
  } // 70 p
  ,
  {
    0x08,
    0x14,
    0x14,
    0x18,
    0x7c
  } // 71 q
  ,
  {
    0x7c,
    0x08,
    0x04,
    0x04,
    0x08
  } // 72 r
  ,
  {
    0x48,
    0x54,
    0x54,
    0x54,
    0x20
  } // 73 s
  ,
  {
    0x04,
    0x3f,
    0x44,
    0x40,
    0x20
  } // 74 t
  ,
  {
    0x3c,
    0x40,
    0x40,
    0x20,
    0x7c
  } // 75 u
  ,
  {
    0x1c,
    0x20,
    0x40,
    0x20,
    0x1c
  } // 76 v
  ,
  {
    0x3c,
    0x40,
    0x30,
    0x40,
    0x3c
  } // 77 w
  ,
  {
    0x44,
    0x28,
    0x10,
    0x28,
    0x44
  } // 78 x
  ,
  {
    0x0c,
    0x50,
    0x50,
    0x50,
    0x3c
  } // 79 y
  ,
  {
    0x44,
    0x64,
    0x54,
    0x4c,
    0x44
  } // 7a z
  ,
  {
    0x00,
    0x08,
    0x36,
    0x41,
    0x00
  } // 7b {
  ,
  {
    0x00,
    0x00,
    0x7f,
    0x00,
    0x00
  } // 7c |
  ,
  {
    0x00,
    0x41,
    0x36,
    0x08,
    0x00
  } // 7d }
  ,
  {
    0x10,
    0x08,
    0x08,
    0x10,
    0x08
  } // 7e ←
  ,
  {
    0x00,
    0x06,
    0x09,
    0x09,
    0x06
  } // 7f →
};

void LcdCharacter(char character) {
  LcdWrite(LCD_D, 0x00);
  for (int index = 0; index < 5; index++) {
    LcdWrite(LCD_D, ASCII[character - 0x20][index]);
  }
  LcdWrite(LCD_D, 0x00);
}

void LcdClear(void) {
  for (int index = 0; index < LCD_X * LCD_Y / 8; index++) {
    LcdWrite(LCD_D, 0x00);
  }
}

void LcdString(String message) {
  for (int i = 0; i < message.length(); i++) {
    LcdCharacter(message[i]);
  }
}

void LcdStringCenter(String message) {
  if (message.length() < DISPLAY_LENGTH) {
    int startChars = (DISPLAY_LENGTH - message.length()) / 2;
    for (int i = 0; i < startChars; i++) {
      LcdCharacter(' ');
    }
  }

  for (int i = 0; i < message.length(); i++) {
    LcdCharacter(message[i]);
  }
}

void LcdWrite(byte dc, byte data) {
  digitalWrite(PIN_DC, dc);
  digitalWrite(PIN_SCE, LOW);
  shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST, data);
  digitalWrite(PIN_SCE, HIGH);
}

/**
 * gotoXY routine to position cursor
 * x - range: 0 to 84
 * y - range: 0 to 5
 */
void gotoXY(int x, int y) {
  LcdWrite(0, 0x80 | x); // Column.
  LcdWrite(0, 0x40 | y); // Row.
}

void drawBox(void) {
  int j;
  for (j = 0; j < 84; j++) // top
  {
    gotoXY(j, 0);
    LcdWrite(1, 0x01);
  }

  for (j = 0; j < 84; j++) //Bottom
  {
    gotoXY(j, 5);
    LcdWrite(1, 0x80);
  }

  for (j = 0; j < 6; j++) // Right
  {
    gotoXY(83, j);
    LcdWrite(1, 0xff);
  }

  for (j = 0; j < 6; j++) // Left
  {
    gotoXY(0, j);
    LcdWrite(1, 0xff);
  }
}

void Scroll(String message) {
  for (int i = scrollPosition; i < scrollPosition + 11; i++) {
    if ((i >= message.length()) || (i < 0)) {
      LcdCharacter(' ');
    } else {
      LcdCharacter(message.charAt(i));
    }
  }
  scrollPosition++;
  if ((scrollPosition >= message.length()) && (scrollPosition > 0)) {
    scrollPosition = -10;
  }
}

float getTemperature() {
  //returns the temperature in Celsius

  byte data[12];
  byte addr[8];

  if (!ds.search(addr)) {
    //no more sensors on chain, reset search
    ds.reset_search();
    return -1001;
  }

  if (OneWire::crc8(addr, 7) != addr[7]) {
    Serial.println("CRC is not valid!");
    return -1002;
  }

  if (addr[0] != 0x10 && addr[0] != 0x28) {
    Serial.print("Device is not recognized");
    return -1003;
  }

  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1); // start conversion, with parasite power on at the end

  byte present = ds.reset();
  ds.select(addr);
  ds.write(0xBE); // Read Scratchpad

  for (int i = 0; i < 9; i++) { // we need 9 bytes
    data[i] = ds.read();
  }

  ds.reset_search();

  byte MSB = data[1];
  byte LSB = data[0];

  float tempRead = ((MSB << 8) | LSB); //using two's compliment
  float TemperatureSum = tempRead / 16;

  Serial.println("------------------------------------");
  Serial.print("Temperature: ");
  Serial.print(TemperatureSum);
  Serial.println("------------------------------------");
  return TemperatureSum;
}

String ipToString(IPAddress ip) {
  String s = "";
  for (int i = 0; i < 4; i++)
    s += i ? "." + String(ip[i]) : String(ip[i]);
  return s;
}

String getInterpolatedColour(float difference) {
  if (difference < 0) {
    difference = 0;
  }
  if (difference > 100) {
    difference = 100;
  }

  difference = map(difference, 0, 40, 0, 100);

  //BLUE - COLD!
  int r1 = 18;
  int g1 = 228;
  int b1 = 232;

  //RED - HOT!
  int r2 = 232;
  int g2 = 18;
  int b2 = 68;

  int rValue = r1 + ((r2 - r1) * (difference / 100.0));
  int gValue = g1 + ((g2 - g1) * (difference / 100.0));
  int bValue = b1 + ((b2 - b1) * (difference / 100.0));

  return String(rValue, HEX) + String(gValue, HEX) + String(bValue, HEX);
}

void handleRoot() {
  gotoXY(4, 2);
  digitalWrite(LED, HIGH);
  float temperature = getTemperature();
  String colour = getInterpolatedColour(temperature);
  String result = "<html> <head> <style> html{ background:-webkit-radial-gradient(circle, #ffffff 0%,#" + getInterpolatedColour(temperature) + " 100%); height:100%; width:100%; } /* Thermometer column and text */ .thermometer{ margin-top: 30px; margin-left: 50%; left: -11px; width:22px; height:150px; display:block; font:bold 14px/152px helvetica, arial, sans-serif; text-indent: 36px; background: -webkit-linear-gradient(top, #fff 0%, #fff 50%, #db3f02 80%, #db3f02 100%); border-radius:22px 22px 0 0; border:5px solid #4a1c03; border-bottom:none; position:absolute; box-shadow:inset 0 0 0 4px #fff; color:#4a1c03; } /* Thermometer Bulb */ .thermometer:before{ content:' '; width:44px; height:44px; display:block; position:absolute; top:142px; left:-16px; z-index:-1; /* Place the bulb under the column */ background:#db3f02; border-radius:44px; border:5px solid #4a1c03; box-shadow:inset 0 0 0 4px #fff; } /* This piece here connects the column with the bulb */ .thermometer:after{ content:' '; width:14px; height:7px; display:block; position:absolute; top:146px; left:4px; background:#db3f02; } </style> <body> <script> var w = window.innerWidth; var h = window.innerHeight; setTimeout(function(){ window.location.reload(1); }, 1000 * 60 * 2); </script> <span class='thermometer'>" + String(temperature) + "&deg;C</span> </body> </html>";
  server.send(200, "text/html", result);
  digitalWrite(LED, LOW);
}

void handleNotFound() {
  digitalWrite(LED, HIGH);
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i = 0; i < server.args(); i++) {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
  digitalWrite(LED, LOW);
}

//https://techtutorialsx.com/2016/07/17/esp8266-http-get-requests/
void downloadOutside(String & tempReference, String & humidityReference) {
  http.begin("http://api.openweathermap.org/data/2.5/weather?lat=54.5103776&lon=-6.0903858&units=metric&appid=13f0a4466b4bd567e68095ca0b14e0be"); //Specify request destination
  int httpCode = http.GET(); //Send the request
  if (httpCode > 0) { //Check the returning code      
    String payload = http.getString(); //Get the request response payload
    Serial.println(payload); //Print the response payload
    parsePayload(payload, tempReference, humidityReference);
  }
  http.end(); //Close connection  
}

void parsePayload(String payload, String & tempReference, String & humidityReference) {
  String TEMP_ID = "\"temp\":";
  String HUMIDITY_ID = "\"humidity\":";
  int i = 0;
  String value = getStringDelimitedValue(payload, ',', i);
  while (value != "") {
    String result = "";
    if (value.indexOf(TEMP_ID) >= 0) {
      tempReference = value.substring(value.indexOf(TEMP_ID) + TEMP_ID.length());
    }

    if (value.indexOf(HUMIDITY_ID) >= 0) {
      humidityReference = value.substring(value.indexOf(HUMIDITY_ID) + HUMIDITY_ID.length());
    }
    i++;
    value = getStringDelimitedValue(payload, ',', i);
  }
}

String getStringDelimitedValue(String data, char separator, int index) {
  int found = 0;
  int strIndex[] = {
    0,
    -1
  };
  int maxIndex = data.length() - 1;

  for (int i = 0; i <= maxIndex && found <= index; i++) {
    if (data.charAt(i) == separator || i == maxIndex) {
      found++;
      strIndex[0] = strIndex[1] + 1;
      strIndex[1] = (i == maxIndex) ? i + 1 : i;
    }
  }

  return found > index ? data.substring(strIndex[0], strIndex[1]) : "";
}

void uploadTemperature(float temperature) {
  if (WiFi.status() == WL_CONNECTED) {
    String outsideTemp = "UNKNOWN";
    String outsideHumidity = "UNKNOWN";
    downloadOutside(outsideTemp, outsideHumidity);
    String content = "{\"value1\":\"" + String(temperature) + "\", \"value2\":\"" + outsideTemp + "\", \"value3\":\"" + outsideHumidity + "\"}";
    http.begin("http://maker.ifttt.com/trigger/temperature_updated/with/key/qHft5eI3sqoK830mZ8NXO");
    http.addHeader("Content-Type", "application/json");
    int httpCode = http.POST(content);
    if (httpCode < 200 || httpCode > 299) {
      displayMessage("FAIL: " + String(httpCode));
      delay(4500);
      LcdClear();
    }
    String payload = http.getString();
    http.end();
  } else {
    displayMessage("Failure");
  }
}

void displayMessage(String message) {
  LcdClear();
  gotoXY(7, 1);
  LcdStringCenter(message);
  delay(500);
}

void serverInit() {
  WiFi.begin(ssid, password);
  Serial.println("");
  gotoXY(4, 2);
  LcdStringCenter("..Loading..");
  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  gotoXY(7, 1);
  LcdStringCenter("Connected!");
  delay(500);

  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(ipToString(WiFi.localIP()));

  if (MDNS.begin("esp8266")) {
    Serial.println("MDNS responder started");
  }

  server.on("/", handleRoot);

  server.on("/inline", []() {
    server.send(200, "text/plain", "this works as well");
  });

  server.on("/contrast_inc", []() {
    contrast = contrast + 1;
    server.send(200, "text/plain", "Contrast: " + String(contrast));
  });

  server.on("/contrast_dec", []() {
    contrast = contrast - 1;
    server.send(200, "text/plain", "Contrast: " + String(contrast));
  });

  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP server started");
  LcdClear();
}

void setupLCD() {
  if (contrast < 0) {
    contrast = 0;
  }
  if (backlight < 0) {
    backlight = 0;
  }
  if (contrast > 255) {
    contrast = contrast % 255;
  }
  if (backlight > 500) {
    backlight = backlight % 255;
  }

  LcdWrite(LCD_CMD, 0x21); // LCD Extended Commands.
  LcdWrite(LCD_CMD, contrast); // Set LCD Vop (Contrast). //B1 or Bf
  LcdWrite(LCD_CMD, 0x04); // Set Temp coefficent. //0x04
  LcdWrite(LCD_CMD, 0x14); // LCD bias mode 1:48. //0x13 or 0x14
  LcdWrite(LCD_CMD, 0x0C); // LCD 0x0C in normal mode. 0x0d for inverse
  LcdWrite(LCD_C, 0x20);
  LcdWrite(LCD_C, 0x0C);

  analogWrite(PIN_BL, backlight);
}

void LcdInitialise(void) {
  pinMode(PIN_SCE, OUTPUT);
  pinMode(PIN_RESET, OUTPUT);
  pinMode(PIN_DC, OUTPUT);
  pinMode(PIN_SDIN, OUTPUT);
  pinMode(PIN_SCLK, OUTPUT);
  pinMode(PIN_BL, OUTPUT);

  digitalWrite(PIN_RESET, LOW);
  digitalWrite(PIN_RESET, HIGH);

  setupLCD();
}

void setup(void) {
  Serial.begin(115200);
  LcdInitialise();
  LcdClear();
  drawBox();
  serverInit();
}

void loop(void) {
  server.handleClient();
  float temperature = getTemperature();
  gotoXY(7, 1);
  LcdString("T: [" + String(temperature) + "]");
  gotoXY(7, 2);
  LcdString("A: [" + String(tempSum / lifeSpan) + "]");
  gotoXY(4, 4);
  Scroll("IP: " + ipToString(WiFi.localIP()));
  if (lifeSpan >= 600) {
    uploadTemperature((tempSum / lifeSpan));
    tempSum = 0.0;
    lifeSpan = 1;
  }
  tempSum += temperature;
  lifeSpan++;
  delay(500);
}
